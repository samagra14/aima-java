@CODE:Pseudocode
@start@function TREE-SEARCH(problem) returns a solution, or failure@start@
  @initialize@initialize the frontier using the initial state of the problem@initialize@
  loop do
    if the @frontier-empty-check@frontier is empty@frontier-empty-check@ then @failure@return failure@failure@
    @frontier-remove@choose a leaf node and remove it from the frontier@frontier-remove@
    if the @check-goal@node contains a goal state@check-goal@ then @solution@return the corresponding solution@solution@
    @expand-node@expand the chosen node@expand-node@, @add-frontier@adding the resulting nodes to the frontier@add-frontier@
@CODE:Java
// function TREE-SEARCH(problem) returns a solution, or failure
@start@List<A> apply(Problem<A, S> problem) {@start@
  // initialize the frontier using the initial state of the problem
  @initialize@Queue<Node<A, S>> frontier = newFrontier(problem.initialState());@initialize@
  // loop do
  while (true) {
    // if the frontier is empty then return failure
    if (@frontier-empty-check@frontier.isEmpty()@frontier-empty-check@) { @failure@return failure();@failure@ }
    // choose a leaf node and remove it from the frontier
    @frontier-remove@Node<S> node = frontier.remove();@frontier-remove@
    // if the node contains a goal state then return the corresponding solution
    if (@check-goal@problem.isGoalState(node.state())@check-goal@) { @solution@return solution(node);@solution@ }
    // expand the chosen node, adding the resulting nodes to the frontier
    for (@expand-node@A action : problem.actions(node.state())@expand-node@) {
      @add-frontier@frontier.add(newChildNode(problem, node, action));@add-frontier@
    }
  }
}
@CODE:Python
@start@def tree_search(problem, frontier):@start@
    """Search through the successors of a problem to find a goal.
    The argument frontier should be an empty queue.
    Don't worry about repeated paths to a state. [Figure 3.7]"""
    @initialize@frontier.append(Node(problem.initial))@initialize@
    @frontier-empty-check@while frontier:@frontier-empty-check@
        @frontier-remove@node = frontier.pop()@frontier-remove@
        if @check-goal@problem.goal_test(node.state)@check-goal@:
            @solution@return node@solution@
        @add-frontier@frontier.extend@add-frontier@(@expand-node@node.expand(problem@expand-node@))
return @failure@None@failure@
